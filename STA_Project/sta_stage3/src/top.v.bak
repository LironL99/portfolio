module top (
    input  wire        clk,
    input  wire        reset_n,
    output wire [31:0] dout
);
    // Counters for driving ALU and false path chain
    reg [31:0] cnt_a;
    reg [31:0] cnt_b;
    reg [31:0] cnt_c;
    wire [31:0] alu_y;
    wire [31:0] false_y;

    // Instantiate ALU with heavy multiply path
    alu_mul_chain u_really (
        .clk (clk),
        .a   (cnt_a),
        .b   (cnt_b),
        .c   (cnt_c),
        .y   (alu_y)
    );

    // Instantiate synthetic long path (false path candidate)
    false_path_chain u_slowly (
        .clk (clk),
        .sel (1'b0),
        .a   (cnt_a),
        .b   (cnt_b),
        .c   (cnt_c),
        .y   (false_y)
    );

    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            cnt_a <= 0;
            cnt_b <= 0;
            cnt_c <= 0;
        end else begin
            cnt_a <= cnt_a + 1;
            cnt_b <= cnt_b + 3;
            cnt_c <= cnt_c + 7;
        end
    end

    // Output ALU result so the path is preserved
    assign dout = alu_y;

endmodule
